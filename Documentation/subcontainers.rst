.. _subcontainers:

Subcontainers (experimental)
============================

A *subcontainer* is a container generated by another storage backend. Usually
it is a "micro-container" pointing at a subset of the parent container content,
but the mechanism doesn't limit it to this case. Subcontainers always have the
same owner as its parent container. If the desired content consists of
subcontainers only (the content of the parent container isn't ought to be
accessed directly), it is recommended to not add any extra paths to the parent
container or use one in a hidden directory (the "uuid" path will be added
automatically anyway).

A subcontainer usually has one storage backend of *delegate* type, pointing at
its parent container and specifying a subdirectory that should be used. Parent
container can be conveniently pointed via a Wildland URL
``wildland:@default:@parent-container:``. Note ``@default`` in this context
always means the owner of the container (not the default user in the Wildland
configuration) and ``@parent-container`` special path is valid only when used
within a subcontainer.

Storage backend that wants to implement subcontainers, should implement a
``list_subcontainers()`` method that returns a list of container manifests (in
a form of ``dict`` with the same structure). It is recommended to include
storage manifests inline. Some of the fields can be skipped, as they are
unambiguously determined by the parent container:

 - ``owner`` in the container part
 - ``owner`` in the storage backend part
 - ``container-path`` in the storage backend part

Each subcontainer should have an unique but stable UUID path (one in form of
``/.uuid/<UUID>`` where ``<UUID>`` is an identifier formed in UUID format). It
should be the first path.

Example implementation of a ``list_subcontainers()`` method would look like this::

    def list_subcontainers(self) -> Iterable[dict]:
        subcontainer_paths = ['/path1', '/path2', '/path3']
        ns = uuid.UUID(self.backend_id[:32])

        for path in subcontainer_paths:
            yield {
                'paths': [
                    '/.uuid/{!s}'.format(uuid.uuid3(ns, path)),
                    path,
                ],
                'backends': {'storage': [{
                    'type': 'delegate',
                    'reference-container': 'wildland:@default:@parent-container:',
                    'subdirectory': path,
                }]}
            }

This example presents three selected subdirectories as a separate subcontainers.


``date-proxy`` storage
----------------------

``date-proxy`` is an example storage with subcontainers. It's a storage that sorts files
according to the modification time. For example, if a file ``foo.txt`` has a
modification time of 2020-05-01, it will be available under
``2020/05/01/foo.txt``. At the same time, each date-based directory is exposed
via a subcontainer with a path ``/timeline/<YEAR>/<MONTH>/<DAY>``.

``date-proxy`` example (using CLI)
----------------------------------

Create a user, if you haven't done that yet::

   $ wl user create User


Create the "reference" container, and directory with files::

   $ ./wl container create Inner --path /reference

   $ wl storage create local Inner --path $HOME/proxy-data \
       --container Inner
   $ mkdir ~/proxy-data
   $ touch ~/proxy-data/file1.txt -t 202005010000
   $ touch ~/proxy-data/file2.txt -t 201905010000

Create the proxy container storage::

   $ wl container create Proxy --path /.proxy

   $ wl storage create date-proxy Proxy \
       --reference-container-url file://$HOME/.config/wildland/containers/Inner.container.yaml \
       --container Proxy

Mount::

   $ wl start
   $ wl container mount --with-subcontainers Proxy

You should be able to see the files::

   $ find ~/mnt/timeline
   /home/user/mnt/timeline
   /home/user/mnt/timeline/2019
   /home/user/mnt/timeline/2019/05
   /home/user/mnt/timeline/2019/05/01
   /home/user/mnt/timeline/2019/05/01/file2.txt
   /home/user/mnt/timeline/2020
   /home/user/mnt/timeline/2020/05
   /home/user/mnt/timeline/2020/05/01
   /home/user/mnt/timeline/2020/05/01/file1.txt

``date-proxy`` example (self-contained manifest)
------------------------------------------------

All manifests can be inlined. You can create a ``container.yaml``
file (or edit existing one using ``wl container edit``)

.. code-block:: yaml

   owner: <OWNER>
   paths:
     - /.uuid/11e69833-0152-4563-92fc-b1540fc54a69
     - /.proxy

   backends:
     storage:
       - type: date-proxy
         container-path: /.uuid/11e69833-0152-4563-92fc-b1540fc54a69
         owner: <OWNER>
         reference-container:
           owner: <OWNER>
           paths:
             - /reference
           backends:
             storage:
               - type: local
                 container-path: /.uuid/11e69833-0152-4563-92fc-b1540fc54a69
                 owner: <OWNER>
                 path: /home/user/proxy-data

This file can be signed with ``wl container sign`` (the edit command will do
that automatically), then mounted using ``wl container mount``.

``--only-subcontainers`` option example
---------------------------------------

There are use-cases where you want treat a parent container only as a wrapper for the subcontainers.
This means that you want to point at the parent container, mount all of its subcontainers but skip
mounting the parent container's storage itself.

This option is going to work only if ``--with-subcontainers`` is set to ``true``.
