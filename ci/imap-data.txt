# Normal emails

normal@dev.null
Test 1
2020-01-01 11:11:11
Test number 1

normal@dev.null
Test 2
2020-02-02 12:12:12
Test number 2

normal@dev.null
Test 3
2020-03-03 13:13:13
Test number 3

# I wanted to include a subject with newlines since I encountered that in the wild,
# but the Python mailbox library refuses to construct such messages.

newlines@dev.null
totally normal subject
2020-04-04 14:14:14
Test number 4\nline 2\nline 3

# Some UTF-8 stuff. Again, I wanted to include invalid UTF-8 encodings because I've seen that
# in the wild, but then the test script explodes (mailbox library expects valid strings,
# can't use byte sequences).

utf8@dev.null
utf8 test 1
2020-05-05 15:15:15
zażółć gęślą jaźń

utf8@dev.null
utf8 test 2
2020-06-06 16:16:16
zażółć gęślą jaźń\npóźne ścięgno\nłąka żab

# Disclaimer:
# The embedded NULL characters below are correctly parsed by the test script, I manually
# confirmed that the mailbox files generated by the test do, indeed, contain embedded NULLs.
# In the first test they are however mysteriously converted to the following UTF-8 hex sequence:
# EFBFBD. This sequence represents Unicode code point U+FFFD, "REPLACEMENT CHARACTER", or �.
# I'm nor sure whether the test IMAP server (dovecot) is responsible for this, or Python's
# IMAP library. Here's a relevant debug log line :
# [imapclient.imaplib] untagged_responses[FETCH] 0 += ["(b'7 (UID 7 ENVELOPE ("Tue, 07 Jul 2020 17:17:17 -0000" {13}', b'zero\xef\xbf\xbdtest 1')"]
# That's not all though. The second embedded-zero test behaves differently. The NULL character
# in email's body is replaced by... 0x80. I have no idea how or why, but here's the log:
# [imapclient.imaplib] untagged_responses[FETCH] 0 += ["(b'8 (UID 8 RFC822 {273}', b'From: zero@dev.null\r\nTo: user@here\r\nSubject: zero test 2\r\nDate: Sat, 08 Aug 2020 18:18:18 -0000\r\nMessage-ID: <163957867381.103.1025012626450033572@830ef8fdc3f0>\r\nContent-Type: text/plain; charset="utf-8"\r\nContent-Transfer-Encoding: 7bit\r\nMIME-Version: 1.0\r\n\r\nzero\x80in body\r\n')"]
# One "nice" thing about this is that a 0x80 byte by itself is an invalid UTF-8 sequence.
# So we get to test that after all...

zero@dev.null
zero\0test 1
2020-07-07 17:17:17
zero in topic

zero@dev.null
zero test 2
2020-08-08 18:18:18
zero\0in body

time@dev.null
no time
this time is invalid
invalid time test
